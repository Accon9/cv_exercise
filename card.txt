#银行卡卡号识别
#步骤：
    1.读取图像，进行二值化处理
    2.轮廓识别与处理
    3.形态学变化
    4.提取每个数字图像
    5.排序数字图像
    6.匹配模板
    
import cv2
import numpy as np

#读取图像
card_GRAY = cv2.imread('card.jpg',0)
#改变图像大小（视情况而定）
card_GRAY4 = cv2.resize(card_GRAY,(4 * card_GRAY.shape[1],4*card_GRAY.shape[0]))
cv2.imshow('card_GRAY4',card_GRAY4)
#二值化处理，使用自适应阈值
adaptiveThresh = cv2.adativeThresh = cv2.adaptiveThreshold(card_GRAY4,255,cv2.ADAPTIVE_THRESH_MEAN_C,
                                                           cv2.THRESH_BINARY_INV,10,3)
cv2.imshow('adaptiveThresh',adaptiveThresh)
#获取轮廓信息
contours,hierarchy = cv2.findContours(adaptiveThresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
#遍历每个轮廓，将噪点填充为黑色背景色
for i in range(len(contours)):
    if cv2.contourArea(contours[i])<160:
        adaptiveThresh = cv2.drawContours(adaptiveThresh,contours,i,(0,0,0),-1)
cv2.imshow('adaptiveThresh2',adaptiveThresh)
#黑帽运算
kernel = np.ones((15,15),dtype=np.unit8)
blackhat = cv2.morphologyEx(adaptiveThresh,cv2.MORPH_BLACKHAT,kernel)
cv2.imshow('adaptiveThresh3',blackhat)
#开运算将数字与背景完全割裂开
kernel = np.ones((3,3),dtype=np.unit8)
opening = cv2.morphologyEx(blackhat,cv2.MORPH_OPEN,kernel)
cv2.imshow('opening',opening)
#对图像再次处理，将剩余噪点填充为黑色
contours,hierarchy = cv2.findContours(opening,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
for i in range(len(contours)):
    x,y,w,h = cv2.boundingRect(contours[i])
    ratio = float(w)/h
    Area = w * h
    if Area < 1800 or Area > 5000:
        opening = cv2.drawContours(opening,contours,i,(0,0,0),-1)
    else:
        if ratio > 0.6 or ratio < 0.57:
            opening = cv2.drawContours(opening,contours,i,(0,0,0),-1)
cv2.imshow('opening2',opening)
#为了与模板匹配，对图像进行膨胀加粗（视情况而定）
kernel = np.ones((5,5),dtype=np.unit8)
dilation = cv2.dilate(opening,kernel,iterations = 1)
cv2.imshow('dilation',dilation)
#对模板进行处理
Template = cv2.imshow('template.jpg')
Template_GRAY = cv2.cvtColor(Template,cv2.COLOR_BGR2GRAY)
ret,Template_GRAY = cv2.threshold(Template_GRAY,200,255,cv2.THRESH_BINARY)
cv2.imshow('Template',Template_GRAY)

def sequence_contours(image,width,height):
    contours, hierarchy = cv2.findContours(image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    #将外接矩形参数存在一个矩阵中,因返回的参数有 x, y, w, h 所以需要一个n行4列的矩阵
    n = len(contours)
    RectBoxes0 = np.ones((n,4),dtype=int)
    for i in range(n):
        RectBoxes0[i] = cv2.boundingRect(contours[i])
        #建立一个新矩阵，将原矩阵排序后存入该矩阵
    RectBoxes = np.ones((n, 4), dtype=int)
        #对轮廓的参数 x 进行排序
    for i in range(n):
        sequence = 0
        for j in range(n):
            if RectBoxes0[i][0] > RectBoxes[i][0]:
                sequence = sequence + 1
        RectBoxes[sequence] = RectBoxes0[i]
    #建立一个列表存储图像
    ImgBoxes = [[] for i in range(n)]
    for i in range(n):
        x,y,w,h = RectBoxes[i]
        ROI = image[y:y+h,x:x+h]
        ROI = cv2.resize(ROI,(width,height))
        thresh_val,ROI = cv2.threshold(ROI,200,255,cv2.THRESH_BINARY)
        ImgBoxes[i] = ROI
    return RectBoxes, ImgBoxes

RectBoxer_Temp, ImgBoxes_Temp = sequence_contours(Template_GRAY,50,80)
RectBoxes, ImgBoxes = sequence_contours(dilation, 50, 80)
#模板匹配
result = []
for i in range(len(ImgBoxes)):
    score = np.zeros(len(ImgBoxes_Temp),dtype=int)
    for j in range(len(ImgBoxes_Temp)):
        score[j] = cv2.matchTemplate(ImgBoxes[i],ImgBoxes_Temp[j],cv2.TM_SQDIFF)
    min_val, max_val, min_indx, max_indx = cv2.minMaxLoc(score)
    result.append(min_indx[1])
print(result)
    
cv2.waitKey(0)
cv2.destoryAllWindows()
