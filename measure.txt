#物体距离测量
#步骤：
    1.读取图像，灰度处理
    2.高斯滤波处理图像
    3.边缘检测并使用形态学操作处理
    4.寻找最小外接矩形并对轮廓排序
    5.将轮廓边框坐标赋给各顶点
    6.计算各中点
    7.计算距离

from scipy.spatial import distance as dist
from imutils import perspective
from imutils import contours
import numpy as np
import imutils
import cv2

#定义中点函数
def midpoint(ptA,ptB):
    return((ptA[0] + ptB[0]) * 0.5, (ptA[1] + ptB[1]) * 0.5)

#读取图片
image = cv2.imread("1.jpg")
image_GRAY = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

#使用高斯滤波平滑处理图像
image_GRAY = cv2.GaussianBlur(image_GRAY,(7, 7), 0)
#边缘检测
edged = cv2.Canny(image_GRAY, 50, 100)
#使用闭运算将物体边缘封闭
kernel = np.ones((3,3),dtype=np.unit8)
edged = cv2.morphologyEx(edged,cv2.MORPH_CLOSE,kernel)
#寻找轮廓
cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)

#对轮廓点进行排序
(cnts,_) = contours.sort_contours(cnts)

ret = None
width = 2

for i in cnts:
    #当轮廓不够大时，假设其为噪声丢弃
    if cv2.contourArea(i) < 200:
        continue
    #计算最小外接矩形
    box = cv2.minAreaRect(i)
    box = cv2.cv.BoxPoints(box)
    box = np.array(box, dtype="int")

    #按照左上、右上、右下和左下的顺序排列旋转的边界框坐标
    box = perspective.order_points(box)
    #绘制轮廓
    cv2.drawContours(image.copy(), [box.astype("int")], -1, (0, 255, 0), 2)

#计算各中点
(tl, tr, br, bl) = box

(tltrX, tltrY) = midpoint(tl, tr)
(blbrX, blbrY) = midpoint(bl, br)
(tlblX, tlblY) = midpoint(tl, bl)
(trbrX, trbrY) = midpoint(tr, br)

#连线
cv2.line(image.copy(), (int(tltrX), int(tltrY)), (int(blbrX), int(blbrY)), (255, 0, 255), 2)
cv2.line(image.copy(), (int(tlblX), int(tlblY)), (int(trbrX), int(trbrY)), (255, 0, 255), 2)

#计算中点集之间的距离
dA = dist.euclidean((tltrX, tltrY), (blbrX, blbrY))
dB = dist.euclidean((tlblX, tlblY), (trbrX, trbrY))

if ret is None:
    ret = dB / width
#通过将相应的欧几里德距离除以 ret 值来计算物体尺寸
dimA = dA / ret
dimB = dB / ret

#绘制图像尺寸
cv2.putText(image.copy(), "{:.1f}in".format(dimA),
            (int(tltrX - 15), int(tltrY - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.65, (255, 255, 255), 2)
cv2.putText(image.copy(), "{:.1f}in".format(dimB),
            (int(trbrX + 10), int(trbrY)), cv2.FONT_HERSHEY_SIMPLEX, 0.65, (255, 255, 255), 2)

cv2.imshow("Image", image.copy())
cv2.waitKey(0)
